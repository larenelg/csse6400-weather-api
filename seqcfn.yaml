AWSTemplateFormatVersion: '2010-09-09'
Description: 'Configures a 4-tier, 2 AZ VPC'
Resources:
  AttachGateway:
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: VPC
    Type: AWS::EC2::VPCGatewayAttachment
  InternetGateway:
    Properties:
      Tags:
      - Key: Name
        Value: "Seq - VPC - IGW"
    Type: AWS::EC2::InternetGateway
  PermitAnyFromPublic:
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'true'
      NetworkAclId:
        Ref: PublicNACL
      Protocol: '-1'
      RuleAction: allow
      RuleNumber: '100'
    Type: AWS::EC2::NetworkAclEntry
  PermitAnyToPublic:
    Properties:
      CidrBlock: 0.0.0.0/0
      NetworkAclId:
        Ref: PublicNACL
      Protocol: '-1'
      RuleAction: allow
      RuleNumber: '100'
    Type: AWS::EC2::NetworkAclEntry
  PublicDefaultRoute:
    DependsOn: AttachGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: PublicRouteTable
    Type: AWS::EC2::Route
  PublicRouteTable:
    Properties:
      Tags:
      - Key: Name
        Value: "Seq - VPC - Public Routes"
      VpcId:
        Ref: VPC
    Type: AWS::EC2::RouteTable
  VPC:
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: 10.0.0.1/24
      Tags:
      - Key: Name
        Value: "Seq - VPC"
    Type: AWS::EC2::VPC
  PublicNACL:
    Properties:
      VpcId:
        Ref: VPC
    Type: AWS::EC2::NetworkAcl
  PublicSubnetA:
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock: 10.0.0.1/24
      VpcId:
        Ref: VPC
    Type: AWS::EC2::Subnet
  PublicSubnetANACLAssociation:
    Properties:
      NetworkAclId:
        Ref: PublicNACL
      SubnetId:
        Ref: PublicSubnetA
    Type: AWS::EC2::SubnetNetworkAclAssociation
  PublicSubnetARouteTableAssociation:
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnetA
    Type: AWS::EC2::SubnetRouteTableAssociation

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0


###########################################
################## ECS ####################
###########################################
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: seq

###########################################
############## ECS SERVICE ################
###########################################
  Service:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      TaskDefinition: !Ref TaskDefinition
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsVpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: 
            - !Ref SecurityGroup
          Subnets: 
            - !Ref PublicSubnetA

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: seq
      Cpu: 512
      Memory: 1024
      NetworkMode: awsvpc
      RequiresCompatibilities: [ "FARGATE" ]
      ExecutionRoleArn: !Ref ServiceRole
      ContainerDefinitions:
        - Name: seq
          Essential: true
          Image: datalust/seq:latest
          Cpu: 512
          Memory: 1024
          Environment:
            - Name: ACCEPT_EULA
              Value: Y
            - Name: SEQ_FIRSTRUN_ADMINPASSWORDHASH
              Value: FAXaj+1mmeR2Ik5Qg73JDXDnZKhQ8VGhvM+r6mzXXyryriOPqA==
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 365

  # This IAM Role grants the service access to register/unregister with the
  # Application Load Balancer (ALB). It is based on the default documented here:
  # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service_IAM_role.html
  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ecs-service-${AWS::StackName}
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ecs-tasks.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/CloudWatchLogsFullAccess'